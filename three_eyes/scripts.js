

const 플레이어 = {
    인덱스: 0,
    승리횟수: 0,
    패배횟수: 0,
    무승부: 0,
    닉네임: 'P',
    마이턴: false,
};
const 컴퓨터 = {
    인덱스: 1,
    닉네임: 'C',
    마이턴: false,
};
const 시스템 = {
    인덱스: 2,
    닉네임: 'S',
    보드판현황: [],
    남은자리: [],
    게임진행상태: false,
    진행턴수: 0,
    이기는조건: [
        // 서로 다른 플레이어가 섞여있는 배열은 턴 진행하면서 확인후 삭제. 
        // 이기는 조건에 배열이 없으면 되면 무승부 처리
    ],
};
const P = 플레이어;
const C = 컴퓨터;
const S = 시스템;
const 출력정보 = {
    '승리': `플레이어가 이겼습니다.<br/>${P.승리횟수}승 ${P.패배횟수}패 ${P.무승부}무<br/><button onclick="초기화()">재시작</button>`,
    '패배': `컴퓨터가 이겼습니다.<br/>${P.승리횟수}승 ${P.패배횟수}패 ${P.무승부}무<br/><button onclick="초기화()">재시작</button>`,
    '무승부': `무승부입니다.<br/>${P.승리횟수}승 ${P.패배횟수}패 ${P.무승부}무<br/><button onclick="초기화()">재시작</button>`,
    '플레이어턴': `컴퓨터가 착수했습니다. 플레이어 턴입니다.`,
    '중복착수': `중복착수가 불가능합니다. 다른 곳을 선택하세요.`,
    '종료착수': `게임 재시작 버튼을 눌러 착수하세요.<br/><button onclick="초기화()">재시작</button>`,
};

초기화();
// 1. 새로고침 되거나 다시시작 버튼이 클릭되면 초기화함수 진행
function 초기화() {
    for (let i = 0; i < 9; i++) {
        const 보드칸 = document.querySelector(`[data-num="${i}"]`);
        // 보드판현황 데이터를 초기화 
        S.보드판현황 = S.닉네임;
        // CSS 색상 처리 초기화 
        보드칸.dataset.color = S.닉네임;
    }
    // 진행턴수, 남은 자리 초기화 
    S.진행턴수 = 0;
    S.남은자리 = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    // 이기는 조건 초기화 
    S.이기는조건 = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 4, 8], [2, 4, 6],
        [0, 3, 6], [1, 4, 7], [2, 5, 8]];
    // 컴퓨터 먼저 시작
    S.게임진행상태 = true;
    C.마이턴 = true;
    P.마이턴 = false;
    컴퓨터착수진행();
}

function 컴퓨터착수진행() {
    if (S.게임진행상태 == true && 컴퓨터.마이턴 == true) {
        // (9 - 진행턴수) 까지의 난수 생성
        const 랜덤자리 = Math.floor(Math.random() * (9 - S.진행턴수));
        const 선택자리 = S.남은자리[랜덤자리];
        S.남은자리.splice((S.남은자리).indexOf(선택자리), 1);
        const 보드칸 = document.querySelector(`[data-num="${선택자리}"]`);
        보드칸.dataset.color = C.닉네임;
        for (let i = 0; i < (S.이기는조건).length; i++) {
            for (let j = 0; j < 3; j++) {
                if (S.이기는조건[i][j] == 선택자리) {
                    S.이기는조건[i][j] = C.닉네임;
                }
            }
        }
        메시지출력(출력정보.플레이어턴);
        승리조건검사();
        무승부조건검사();
        다음턴();
        console.log('이기는조건', S.이기는조건);
        console.log('남은자리', S.남은자리);
    }
}

function 승리조건검사() {
    // let 삭제예정 = [];
    for (let i = 0; i < (S.이기는조건).length; i++) {
        if (S.이기는조건[i][0] == S.이기는조건[i][1] && S.이기는조건[i][1] == S.이기는조건[i][2]) {
            if (C.마이턴 == true) {
                메시지출력(출력정보.패배);
                P.패배횟수++;
            }
            if (P.마이턴 == true) {
                메시지출력(출력정보.승리);
                P.승리횟수++;
            }
            S.게임진행상태 = false;
        }
        // if (S.이기는조건[i][0] != S.닉네임 && S.이기는조건[i][1] != S.닉네임 && S.이기는조건[i][2] != S.닉네임) {
        //     if (S.이기는조건[i][0] != S.이기는조건[i][1] || S.이기는조건[i][1] != S.이기는조건[i][2]) {
        //         삭제예정.push(i);
        //     }
        // }
        // console.log('삭제예정', 삭제예정);
    }

    // for (let i = 0; i < 삭제예정.length; i++) {
    //     (S.이기는조건).splice(S.이기는조건[(삭제예정[i])], 1);
    //     console.log(S.이기는조건[삭제예정[i]]);
    // }
}

function 무승부조건검사() {
    if (S.남은자리 <= 0 && S.게임진행상태 != false) {
        S.게임진행상태 = false;
        메시지출력(출력정보.무승부);
        P.무승부++;
    }
}

function 다음턴() {
    if (S.게임진행상태 != false) {
        S.진행턴수++;
        C.마이턴 = !(C.마이턴);
        P.마이턴 = !(P.마이턴);
        컴퓨터착수진행();
    }
}

function 플레이어착수(선택자리) {
    // 게임이 끝났는데 눌렀으면
    if (S.게임진행상태 == false) {
        메시지출력(출력정보.종료착수);
    } else if (S.게임진행상태 == true && P.마이턴 == true) {

        // 컴퓨터나 플레이어가 착수한곳을 눌렀을 때
        const 보드칸 = document.querySelector(`[data-num="${선택자리}"]`);
        if (보드칸.dataset.color != S.닉네임) {
            메시지출력(출력정보.중복착수);
        } else {
            보드칸.dataset.color = P.닉네임;
            S.남은자리.splice((S.남은자리).indexOf(선택자리), 1);
            for (let i = 0; i < (S.이기는조건).length; i++) {
                for (let j = 0; j < 3; j++) {
                    if (S.이기는조건[i][j] == 선택자리) {
                        S.이기는조건[i][j] = P.닉네임;
                    }
                }
            }
        }
        console.log('남은자리', S.남은자리);
        메시지출력(출력정보.플레이어턴);
        승리조건검사();
        무승부조건검사();
        다음턴();
    }
}

function 메시지출력(분류번호) {
    document.querySelector('.infoMsg').innerHTML = 분류번호;
}