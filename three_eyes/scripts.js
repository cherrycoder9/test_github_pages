

const 플레이어 = {
    인덱스: 0,
    닉네임: 'P',
    승리: 0,
    마이턴: false,
};
const 컴퓨터 = {
    인덱스: 1,
    닉네임: 'C',
    승리: 0,
    마이턴: false,
};
const 시스템 = {
    인덱스: 2,
    닉네임: 'S',
    보드판현황: [],
    남은자리: [],
    게임진행상태: false,
    진행턴수: 0,
    이기는조건: [
        // 서로 다른 플레이어가 섞여있는 배열은 턴 진행하면서 확인후 삭제. 
        // 이기는 조건에 배열이 없으면 되면 무승부 처리
    ],
};
const P = 플레이어;
const C = 컴퓨터;
const S = 시스템;

초기화();
// 1. 새로고침 되거나 다시시작 버튼이 클릭되면 초기화함수 진행
function 초기화() {
    for (let i = 0; i < 9; i++) {
        const 보드칸 = document.querySelector(`[data-num="${i}"]`);
        // 보드판현황 데이터를 초기화 
        S.보드판현황 = S.닉네임;
        // CSS 색상 처리 초기화 
        보드칸.dataset.color = S.닉네임;
    }
    // 진행턴수, 남은 자리 초기화 
    S.진행턴수 = 0;
    S.남은자리 = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    // 이기는 조건 초기화 
    S.이기는조건 = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 4, 8], [2, 4, 6],
        [0, 3, 6], [1, 4, 7], [2, 5, 8]];
    // 컴퓨터 먼저 시작
    S.게임진행상태 = true;
    C.마이턴 = true;
    P.마이턴 = false;
    컴퓨터착수진행();
}

function 컴퓨터착수진행() {
    if (S.게임진행상태 == true && 컴퓨터.마이턴 == true) {
        // (9 - 진행턴수) 까지의 난수 생성
        const 인덱스 = Math.floor(Math.random() * (9 - S.진행턴수));
        const 선택자리 = S.남은자리[인덱스];
        const 보드칸 = document.querySelector(`[data-num="${선택자리}"]`);
        보드칸.dataset.color = C.닉네임;
    }
    S.진행턴수++;
}

function 플레이어착수() {
    // ㄴ
}

document.querySelector(`[data-num="7"]`).dataset.who = 'c';
// 2. 보드판 셀X를 클릭하면 진행되는 함수
// 3.

function 메시지출력(분류번호) {
    const 출력정보 = [{
        '승리': '플레이어가 이겼습니다',
        '패배': '컴퓨터가 이겼습니다.',
        '무승부': '무승부입니다.',
        '중복착수': '중복착수가 불가능합니다.',
        '종료착수': '게임 재시작 버튼을 눌러 착수하세요.',
    }];
    document.querySelector('.infoMsg').innerHTML = 출력정보.승리;
    console.log(typeof 출력정보.분류번호);
}
